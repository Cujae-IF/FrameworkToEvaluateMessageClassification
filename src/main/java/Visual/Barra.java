/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import javax.swing.ImageIcon; 
import org.jfree.chart.ChartFactory; 
import org.jfree.chart.JFreeChart; 
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.ImageIcon; 
import javax.swing.JOptionPane;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Miguel
 */
public class Barra extends javax.swing.JFrame {
    

  
  private ArrayList<String> clasifierNames;
  
  private static ArrayList<GeneralMeasures> generalMeasures;

    /**
     * Creates new form Barra
     */
    public Barra() {
        
        initComponents();
        clasifierNames=new ArrayList<>();
        generalMeasures=new ArrayList<>();
        
        generalMeasures = Results.getGeneralMeasures();
        
        clasifierNames = Results.getClasifierNames();
        
        
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        for (int i = 0; i < clasifierNames.size(); i++) {
            dataset.setValue(calcPrecision(clasifierNames.get(i)), "Precision", clasifierNames.get(i));
            dataset.setValue(calcRecall(clasifierNames.get(i)), "Cobertura", clasifierNames.get(i));
            dataset.setValue(calcAccuracy(clasifierNames.get(i)), "Exactitud", clasifierNames.get(i));
        }
        
         JFreeChart chart=ChartFactory.createBarChart("Resumen", "Medidas", "Valores", dataset, PlotOrientation.VERTICAL, true, true, false);
         BufferedImage graﬁcoBarra=chart.createBufferedImage(jPanel1.getWidth(), jPanel1.getHeight());
         jLabel3.setSize(jPanel1.getSize());
         jLabel3.setIcon(new ImageIcon(graﬁcoBarra));
         jPanel1.updateUI();      
         
//        showGraphicsAccuracy();
//        showGraphicsRecall();
//        showGraphicsPrecision();
//        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGeneral = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(50, 50));

        jButton1.setText("Atrás");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelGeneralLayout = new javax.swing.GroupLayout(jPanelGeneral);
        jPanelGeneral.setLayout(jPanelGeneralLayout);
        jPanelGeneralLayout.setHorizontalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 506, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelGeneralLayout.setVerticalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

//    private void showGraphicsPrecision() {
//         if (clasifierNames.size() > 0) {
//            JFreeChart barra = null;
//            DefaultCategoryDataset datos;
//            datos = new DefaultCategoryDataset();
//
//            for (int i = 0; i < clasifierNames.size(); i++) {
//                datos.setValue(calcPrecision(clasifierNames.get(i)), clasifierNames.get(i), "");
//            }
//           
//
//            barra = ChartFactory.createBarChart("Resumen de Precision", "Clasificadores","Precisión",datos,PlotOrientation.VERTICAL,true,true,true);
//
//            BufferedImage graﬁcoBarra=barra.createBufferedImage(jPanelGrafico.getWidth(), jPanelGrafico.getHeight());
//
//            jLabelGrafico.setSize(100, 100);
//            jLabelGrafico.setIcon(new ImageIcon(graﬁcoBarra));
//            jPanelGrafico.updateUI();
//        } else {
//            JOptionPane.showMessageDialog(null, "No existe ningun clasificador");
//        }
//    }
//    private void showGraphicsAccuracy() {
//         if (clasifierNames.size() > 0) {
//            JFreeChart barra = null;
//            DefaultCategoryDataset datos;
//            datos = new DefaultCategoryDataset();
//
//            for (int i = 0; i < clasifierNames.size(); i++) {
//                datos.setValue(calcAccuracy(clasifierNames.get(i)), clasifierNames.get(i), "");
//            }
//           
//
//            barra = ChartFactory.createBarChart("Resumen de Exactitud", "Clasificadores","Exactitud",datos,PlotOrientation.VERTICAL,true,true,true);
//
//            BufferedImage graﬁcoBarra=barra.createBufferedImage(jPanelExactitud.getWidth(), jPanelExactitud.getHeight());
//
//            jLabel2.setSize(100,100);
//            jLabel2.setIcon(new ImageIcon(graﬁcoBarra));
//            jPanelExactitud.updateUI();
//        } else {
//            JOptionPane.showMessageDialog(null, "No existe ningun clasificador");
//        }
//    }
//    private void showGraphicsRecall() {
//         if (clasifierNames.size() > 0) {
//            JFreeChart barra = null;
//            DefaultCategoryDataset datos;
//            datos = new DefaultCategoryDataset();
//
//            for (int i = 0; i < clasifierNames.size(); i++) {
//                datos.setValue(calcRecall(clasifierNames.get(i)), clasifierNames.get(i), "");
//            }
//           
//
//            barra = ChartFactory.createBarChart("Resumen de Cobertura", "Clasificadores","Cobertura",datos,PlotOrientation.VERTICAL,true,true,true);
//
//            BufferedImage graﬁcoBarra=barra.createBufferedImage(jPanelCobertura.getWidth(), jPanelCobertura.getHeight());
//
//            jLabel1.setSize(100,100);
//            jLabel1.setIcon(new ImageIcon(graﬁcoBarra));
//            jPanelCobertura.updateUI();
//        } else {
//            JOptionPane.showMessageDialog(null, "No existe ningun clasificador");
//        }
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Barra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Barra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Barra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Barra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Barra().setVisible(true);
            }
        });
    }

    public ArrayList<String> getClasifierNames() {
        return clasifierNames;
    }

    public void setClasifierNames(ArrayList<String> clasifierNames) {
        this.clasifierNames = clasifierNames;
    }

    public static ArrayList<GeneralMeasures> getGeneralMeasures() {
        return generalMeasures;
    }

    public static void setGeneralMeasures(ArrayList<GeneralMeasures> generalMeasures) {
        Barra.generalMeasures = generalMeasures;
    }
    public float calcPrecision(String clasifier){
        float result = 0;
        int cant = 0;
        for (int i = 0; i < generalMeasures.size(); i++) {
            if(generalMeasures.get(i).getClasifierName().equalsIgnoreCase(clasifier)){
                result += generalMeasures.get(i).getPrecision();
                cant++;
            }
        }
        return result/cant;
    }
    public float calcAccuracy(String clasifier){
        float result = 0;
        int cant = 0;
        for (int i = 0; i < generalMeasures.size(); i++) {
            if(generalMeasures.get(i).getClasifierName().equalsIgnoreCase(clasifier)){
                result += generalMeasures.get(i).getAccuracy();
                cant++;
            }
        }
        return result/cant;
    }
    public float calcRecall(String clasifier){
        float result = 0;
        int cant = 0;
        for (int i = 0; i < generalMeasures.size(); i++) {
            if(generalMeasures.get(i).getClasifierName().equalsIgnoreCase(clasifier)){
                result += generalMeasures.get(i).getRecall();
                cant++;
            }
        }
        return result/cant;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelGeneral;
    // End of variables declaration//GEN-END:variables
}
